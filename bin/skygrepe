#!/usr/bin/env ruby
# encoding: utf-8
require 'yaml'

config = {}

config_path = File.join(ENV['HOME'], ".skygrepe")
if File.readable?(config_path)
  config = YAML.load_file(config_path)
end

unless config["main_db_path"]
  path = nil
  files = Dir["#{ENV['HOME']}/Library/Application Support/Skype/*/main.db"].to_a
  unless files.empty?
    files.each.with_index do |file, idx|
      puts "%2d %s" % [idx + 1, file]
    end
    puts "%2d %s" % [files.length + 1, "Other"]
    puts "Choose path: "
    idx = $stdin.gets.to_i - 1
    if idx < files.length
      path = files[idx]
    end
  end

  unless path
    print "please type path/to/main.db: "
    path = File.expand_path($stdin.gets.strip.gsub(/\\ /, "\ "))
  end

  raise "Failed to read #{path.inspect}" unless File.readable?(path)
  config = {"main_db_path" => path}
  open(config_path, "w") do |f|
    f.puts(YAML.dump(config))
  end
end

$LOAD_PATH << File.expand_path("../../lib", __FILE__)
require 'skygrepe'

require "highline/system_extensions"

def get_char_without_enter
  HighLine::SystemExtensions.raw_no_echo_mode
  begin
    HighLine::SystemExtensions.get_character
  ensure
    HighLine::SystemExtensions.restore_mode
  end
end

c =Skygrepe::Context.new(ARGV.first, config)
while !c.quit?
  rows = c.run
  rows.each do |line|
    puts line.join("|")
  end
  break if c.count <= c.limit

  while true
    print("command (h)elp: ")

    if cmd = get_char_without_enter # $stdin.getc
      if cmd == "\r".ord
        print "\r               \n"
        next
      end
      cmd = cmd.chr
      print("\r")
      case cmd
      when /\Ah/ then
        puts "(N)ext page or <SPACE>: next page of list"
        puts "(P)rev page: previous page of list"
        puts "(s)how: specify message id"
        puts "(d)etail: show message"
        puts "(n)ext: show next message"
        puts "(p)rev: show previous message"
        puts "(q)uit: quit"
      when " " then c.next_page; break
      when /\AN/ then c.next_page; break
      when /\AP/ then c.prev_page; break
      when /\Aq/ then c.quit; break
      when /\As/ then
        print(" " * 20)
        print("\r")
        print("type message id: ")
        id = $stdin.gets
        d = c.detail(id)
        unless d
          puts "no data found for #{id.inspect}"
          break
        end
        puts d.join("|")
      when /\Ad/ then
        d = c.detail(c.current_id)
        unless d
          puts "No data"
          break
        end
        puts d.join("|")
      when /\An/ then
        d = c.next_detail
        unless d
          puts "No data"
          break
        end
        puts d.join("|")
      when /\Ap/ then
        d = c.prev_detail
        unless d
          puts "No data"
          break
        end
        puts d.join("|")
      end
    end
  end

end
